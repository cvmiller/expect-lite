##################################################################################
#
#  Copyright (C) Craig Miller 2008-2010
#
#  Copyright (C) Freescale Semiconductor, Inc. 2005-2007
#
#  See the file "license.terms" for information on usage and redistribution
#  of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
##################################################################################

Expect-lite (was CLI Validate Setup Script)
Script logs into Tempest, sends command file, while validating commands
	fails if validation fails with return code 1 (0=passed)

by Craig Miller 19 Jan 2005

Command Arguments:
	<Remote-Host|IP>
	<command_file>
	<user_directory>
	[additional constants, see usage]


Updated 1 March 2005
	Added result codes to align with Vince's Regression wrapper (stub.tst)
	Added ssh access (not all tempests permit root access via telnet

Updated 3 March 2005 (Girl's Day in Japan)
	Added swy_ctrl path to be passed via cli arg
	General clean up, and removal of unused vars and procs

Updated 8 March 2005
	Added zLogin Proc to handle retry on logins

Updated 9 March 2005
	Updated zLogin to make it a bit smarter in logging in

Updated 16 March 2005
	Added ^] to quit a telnet session

Updated 31 March 2005
	Improved where a `;' comment prints (closer to the next send line)

Updated 12 May 2005
	Added Expect Line when test Fails - making it easier to understand failure
	Moved printing of expect timeout notification 

Updated 17 May 2005
	Added General control char send facility. Send control chars with >^B
	Added Var substitution facility. Vars are defined $var=value
		Vars can't have spaces, but can have '_' or '-'

Updated 2 June 2005
	Added 'catch' protection to gracefully handle spawn/connection errors

Updated 16 June 2005
	Updated timeout value (@) to accept leading space i.e. '@ 5'
		This permits use of Vars in timeout i.e. '@ $mytimeout'

Updated 17 June 2005
	Added concept of "include file"
		Include files will be read from same directory as cmd_file
		Include files share the same Var space as the cmd_file

Updated 13 Sept 2005
	Added protection (via catch) on '>' send strings to ensure connection to tempest is still good
		Script terminates with a friendly message if connection is gone

Updated 18 Oct 2005
	Added Construct of Constants which are passed on the command line (as args > 3)
		Usage is now: usage: cli_validate_setup.tcl <tempest_IP> <command_file> [<swy_install_dir>/swy] [const1=value1] [const2=value2] ...
	Added var value can begin with '[' this permits ranges such as [4-6]

Updated 13 Dec 2005
	Fixed bug with unknown vars (such as $f intended for a shell script)
	Now cli_validate passes unknown vars to command line

Updated 13 Dec 2005
	Added ability to connect to co-sim by detecting 192.168.10.1 address and using telnet access

Updated Feb 2005
	Changed to only login as normal user rather than root
	Removed trailing "/swy" to swyprefix
	Removed ability to connect to co-sim by detecting 192.168.10.1 address


Updated 14 March 2006
	Changed name to expect-lite
	Updated usage to reflect new name

Updated 11 April 2006
	Added Dynamically assigned Vars with the first char of the line is '+'
		Must have Parens () to capture the value of the variable
	Usage +$myvar=not captured text (captured text)
		+$myvar=not captured text ([a-zA-z0-9]+)
		+$hostname=(came[a-z\-0-9]+|temp[a-z\-0-9]+)
	Added Static Var parser which allows spaces in variable value

Updated 13 April 2006 
	Added RTL mode - multiples all timeouts by value of constant rtl
		Specify rtl=<value> on command line (which defines the constant)

Updated 3 May 2006
	Changed expect timeout - when user sets to 0, inserts a 50 ms delay (in wait_for_prompt)
		this prevents command line buffer overflow

Updated 16 May 2006
	Added built-in constant $arg0 which holds expect-lite script name

Updated 17 May 2006
	Fixed bug in Dynamic Var - now \n &\r's are stripped out of var capture value
	Added 50ms wait in Dynamic Var capture, allowing slow target to respond
 
Updated 18 May 2006
	Reworked entire Var system - now parses vars without spaces (ie. $var1$var2)
		Also Vars are allowed in defining other static vars (ie. $var1=litteral/$var3/stuff)
		Vars will not be derefenced on lines starting with '#' or '+'

Updated 23 May 2006
	Fixed bug in new Var system - was not catching end of Var with chars '(' ')'
		Added first non-var char detection (rather than last checked)

Updated 25 May 2006
	Fixed bug in new Var system - did not correctly ignore empty vars (ie. !@#$%^&*()_+-= )

Updated 21 June 2006
	Added '>>' to send line out without first waiting for a prompt. 
		This is useful when creating text files on the fly with cat (ie. >cat > myfile.txt)

Updated 7 Sept 2006
	Added ignoring an include file named "NONE" 
	This permits the following code using a bash if statement:
		 >if  [ $manarch = i386 ]; then  
		 >echo "test_include.txt"
		 >else 
		 >echo "" 
		 >fi
		 +$INCLUDE=\n([0-9a-zA-Z\._]+)

		 ~$INCLUDE
	If the variable $manarch is not set to i386, then nothing will be echoed, 
		$INCLUDE will be set to "NONE"
	The include action '~$INCLUDE' will now try to include the file NONE, which will be ignored, 
	and the script will continue

Updated 13 Sept 2006
	Added Dynamic Var to be set with another Var  
		>$search_pattern=\n([0-9a-zA-Z\._]+)
		>+$INCLUDE=$search_pattern
	This permits creating more generic capture files (with search_pattern set at top of test)


Updated 3 Oct 2006
	Added detection of coloured prompt - print message to encourage user to not use 
	In function wait_for_prompt added '.{0,9}' to -re, which may allow coloured prompts

	General clean up comments

	Fixed bug with potential unbalanced parens (i.e. '<abc(def')
		Now all parens and square-brackets are escaped if unbalanced parens 
		or square backets are detected
	
	Added 10ms delay when sending lines with '>>'. This gives the remote host time to catchup.


Updated 18 Oct 2006
	Updated "unbalanced parens" routine to handle braces (i.e. '{}') as well

Updated 19 Oct 2006
	Implemented beginings of permitting execution of "Real Expect(tm)" commands using the '!'
		Funtionality provided to assist expect-lite, not replace it
		Limitations:
			Extremely limited protection on expect-lite internal variables
			Limited crash protection, expect-lite runs "Expect" commands in a 'catch'
			No support for altering expect-lite behaviour (i.e. can't change include file names) 
		Access expect-lite internal Constants and Vars
			!set arch $Cnamespace(manarch)
			!set pwd $unamespace(pwd)
		Access to Branching with line continuation
			!if { $arch == "ppc" } { 		\
			!	puts "\narch is $arch\n" 	\
			!}							\
			!
		Access to "Real Expect(tm)" send & expect commands
			!send "ls\n"
			!expect -re   "test" { puts "got test"} "rand2" { puts "got rand" } default {puts "\ngot nothing"}
		Access to Fail the test by calling _el_fail_test, which gives return code of 1
			!_el_fail_test 


Updated 21 Oct 2006
	Continued improvement of Embedded Expect(tm)
		Removed requirement for line continuation
			Now Expect is collected in "islands" and executed after "island shore" is reached 
				The island shore is defined by lines starting with: > >> < ; @ ~ + $
				Blank and comments lines do not an island make
		Limitations:
			Expect Vars now protected, however, Expect code becomes islands (can't share vars across islands)
			Expect has limited access to expect-lite vars (only Constants, Vars, and timeout)
			Protected Vars, do not support use of "global vars", ("upvar glovalvar localvar" should be used)

Updated 23 Oct 2006
	Continued improvement of Embedded Expect(tm)
		Tested with TCL functions: creating proc's and sourcing TCL files: Passed
		Limitations:
			No support for global key word (in Embedded Expect(tm)) - 
			Will issue a warning if global is detected
			switch statement not supported (won't take ';' in statement)

Updated 29 Oct 2006
	Continued improvement of Embedded Expect(tm)
		Removed island environement limitation on Embedded Expect(tm)
			Although Expect code is still evaluated at each "shore", 
			vars, and procs are global across islands
		Limited support for Globals
			Because of var protection, vars defined at top level are not automatically global
			To declare a var at top level as global use "set ::<var> <value>"
				The double colon '::' makes var global (this is a TCL standard)
			Then use the global keyword as usual in proc's
			This removes some of the var protection, but it may be adaquate


Updated 10 Nov 2006
	Changed CLI processing. Removed requirement for first 3 arguments
	Now all arguments are passed in the var=value format, in any order
		Required arguments are remote_host= cmd_file= or r= c=
			user_dir= or u=
		Additional args will become expect-lite constants
	Also expect-lite can obtain argument info from the shell environment
		EL_REMOTE_HOST
		EL_CMD_FILE
		EL_USER_DIR

Updated 28 Nov 2006
	Additional limitation of Embedded Expect(tm)
		expect lines must be on one line 
		e.g. expect  -re   "tmp" { puts "got tmp"} "rand" { puts "got rand" } default {puts "\ngot nothing"}

Updated 1 Dec 2006	version 2.2.0
	Added NOT Expect: Searches expect buffer for string, if found fails test
	This feature permits searching for errors which may only occationally occur
	Examples:
		Fail if date output includes Dec
			>date
			-<Dec
		Fail if command output has the value of this or that
			>id
			-<(this|that)
		Fail device doesn't exist 
			>ls -l /dev/linux
			-<No such file
		This feature does not clear the expect input buffer, and should 
		be used before a valid expect.  e.g.ttyS2 will still be found
			>ls -1 /dev/ttyS*
			-<ttyX
			<ttyS2
	Limitations:
		When used in conjuction with an expect '<' only output after the 
		successful '<' will searched. e.g. ttyS1 will not be found 
			> ls -1 /dev/ttyS*
			<ttyS2
			-<ttyS1

Updated 5 Dec 2006	version 2.2.1
	Removed Dynamic Var Capture limitation of 1 capture per command sent
		Utilizing -notransfer, the expect input buffer is not consumed by 
			Dynamic Variable Capture
		As with NOT expect, use Dyn Var Capture BEFORE a valid expect
	Example:
		>env | sort
		+$home=\nHOME=([a-z/]+)
		+$shell=\nSHELL=([a-z/]+)
		<TERM=xterm

Updated 18 Dec 2006
	Added BSD-Style Licensing Info

Update 12 April 2007 	version 2.2.3d
	Added Conditional processing, supporting a if/then/else statement using ?
		e.g. ?cond?action:else_action
	Conditional tests of '==', '!=' '>=', '<=', '>', '<' are supported
	Example:
		? $name==craig ? >echo "hello123"
		?$name!=$telephone?; === NE; Print var name:$name
		? $name != $telephone ? $var1=$name
		? $age > 30 ? >echo "old age" :: >echo "young age"
	Actions/else_actions can be any expect-lite command line

Updated 18 April 2007	version 2.3.0d1
	Added Concept of Labels, and "jump to label"
	Labels are defined as lines beginning with '%' e.g. %skip2next_section
	If a conditional has a label as the 'action' statement, an implied 
		"jump to label" will be performed e.g. ?$a==b?%skip2next_section
	Limitations:
		Jump to label is limited to jumping foward in the script (no looping)
	Example: (first echo line will not be executed, if $arch==ppc)
		? $arch==ppc ?%skip2ppc
		> echo "not in ppc"
		%skip2ppc
		> echo "in ppc"
	
Updated 26 April 2007	version 2.3.0d5
	Added optional "if" or "IF" to conditional for better readability of scripts
		e.g. ?IF cond?action::else_action
	Added feature to allow leading white space, permitting indentation
		This feature makes if/jump-to-label blocks easier to read

Updated 8 May 2007	version 2.3.0d8
	Added quick (unbuffered) printable comment. Lines beginning with ';;'
		will be printed out to the screen right away with no "extra" new lines
		Used to print help, or other multiline messages to console
	Example:
		;; This is help line 1
		;; This is help line 2
		
Updated 31 May 2007 version 2.3.1
	Fixed bug when label was indented (script ran to end)
	

Updated 8 June 2007 version 2.3.1.d
	Added 2 pass variable dereferencing. Now vars can be defined from
		other variables.
	Example:
		$var1=test
		$counter=1
		$new_var=$var$counter		($new_var will equal 'test')
	
	Added concept of 'fail_script'. Used to clean up after a test failure
		By declaring an include script with '*~<filename>' the include 
		script will be run when the main script detects a failure.
	Example:
		*~cleanup.inc
	Script debugging use. By including a script which sets success flag,
		the main script will never fail, but will continue. Using the 
		expect 'interact' feature will allow the script developer to
		fix things while the script is running.
	Example in *~debug.inc
		!interact +++ return
		!set _el(success) 1


Updated 5 Sept 2007 version 2.3.1d4
	Include file now allows absolute path (by checking first
		character of filename is '/')
		If not, the relative path to running script will be used
	Applies to Fail Include Script as well
		
7 Sept 2007 version 2.4.0
	Same as version 2.3.1.d4 - released as open source
		see http://expect-lite.sourceforge.net/
		
Updated 9 Oct 2007 version 2.4.0.d1
	Static variables may be blank i.e. $myvar=
		Or start with a space i.e. $myvar= this test
	ssh_key method will use $user if not blank
		This permits the login user to be different from the user running
		the script

Updated 16 Oct 2007 version 2.4.0.d2
	Fixed bug in conditional, a control char could not be sent as action
		eg. ?if $a != 1 ? >^C
		Now this is supported
	
Updated 28 Oct 2007 version 3.0.0d1
	Changed entire command script read subsystem
		Previous system read directly from script file
		New system reads script file into buffer, which can be
			randomly accessed
		This permits looping! (realistcally only repeat loops)
			Added infinite loop protection
	Example:
		; ======== Incrementing Loop ========
		$max=5
		$count=3
		%REPEAT_INC_LOOP
		# increment variable
		+$count
		# stop the run away loop
		>echo $count
		-<7
		?if $count <= $max ?%REPEAT_INC_LOOP
	
	Added variable increment and decrement to support looping
	Example:
		+$var
		-$var
		
Updated 31 Oct 2007 version 3.0.1
	Fixed bug in infinite loop handling (script just died)
		Now script will fail, and the fail_script will be called if defined
	Fixed bug in _el_buffer (fail upon reading empty command script file)
	Fixed bug in Expect-Not (did not call fail_script)

Updated 1 Nov 2007 version 3.0.2
	Fixed bug in Fail_Script handling 
		(original script would continue running, give Passed as result)
		
Updated 4 Nov 2007 version 3.0.3
	Added remote_host=none which permits using expect-lite without
		loging into a remote host. Best used for trying out 
		expect-lite without the fuss of setting up ssh_keys and such
		Not all functions supported (eg. '>>' )
	Added Installation & Quick Start Guide documentation
	
Updated 30 Nov 2007 version 3.0.4
	Fixed bug #1839620 dynamic variables only support "$ " prompt
		Specifically added "% " to the list of prompts
		
Updated 14 Dec 2007 version 3.0.5d2
	Fixed bug, where line 2 of the script was not executed
		
Updated 1 Feb 2008 version 3.0.6d1
	Added 2 pass variable dereferencing in var assignments
		ie. $some_var=$dut_if$count
			Where $dut_if0 is previously defined and $count=0
		
Updated 13 Feb 2008 version 3.0.6d2
	Fixed bug in jump to label, proc _el_buffer did not strip leading 
		white space causing search to wrap and fail
		Only occured if %LABEL was indented (with white space)

Updated 14 Feb 2008 version 3.0.6d3
	Added 'math variable' permitting math operations
		ie. =$answer*$five/2.0
		Supports arithmetic operators:  + = * / %
			and bitwise operators: << >> & | ^
		Result is always assigned to the 'math variable'
		
Updated 21 Feb 2008 version 3.1.0d2
	Added pseudo arrays by permitting dereferencing of variables on left
		side of equals assignment statement, except first variable name
	Example:
		$two=2
		$array$two=value
		; === show value of $array2
	Limitation:
		Additional variables on left side (ie. $two) must only contain
			legal variable characters [A-Za-z0-9_]
			
Updated 28 March 2008 version 3.1.1d1
	Added command line arguments to permit passing login user and password
		Recommend using ssh keys, but the user may still be different than
			the user running the script. 
		Using the password option is inherently insecure, as the password
			is in the clear (anyone can read it)
	Example:
		./expect-lite r=somehost c=somescript u=<username> p=<user_password>
		

Updated 4 June 2008 version 3.1.2
	Changed order of arg parsing to set Env Vars first
		Based on comment in review: http://www.linux.com/feature/128384
	Now Env Vars can be set, and expect-lite invoked with no args
	
Updated 7 July 2008 version 3.1.3
	Added Tips and Techniques Guide online
	Added -v or --verbose option - Displays match data & buffer
	

Updated 6 August 2008 version 3.1.4
	Fixed bug in dyn var array assignment (ie. +$this$count=\n([a-z]+)
	expect-lite output is getting chatty
		Changed default WARN=0 (turn off warnings)
	Changed -v to show warnings, conditionals & dyn var assignments
		-vv|--verbose options now display expect data & buffer
	
Updated 2 September 2008 version 3.1.4d5
	Fixed bug when embedded expect set an expect-lite variable right before
		it is used by expect-lite, variable would not be dereferenced.
	e.g. 
		!randomize r_windowsize_muliplier 0.3 2.5
		=$last_enqueuenumber + 2 * $r_windowsize_muliplier
	Embedded expect now calls _el_deref_line before continuing
	
Updated 23 September 2008 version 3.1.4d6
	Enhanced -vv to show "find/in" of dynamic variable capture in addition
		to expect
		
Updated 1 Oct 2008 version 3.1.4d7
	Fixed bug in telnet access, and ssh access
		Passed argument user_password was not accepted, now fixed
	
Updated 20 Oct 2008 version 3.1.4
	Release version of d7
	Added self_test* scripts
		self_test_conditional.txt  self_test_math.txt  self_test_var_deref.txt
	

Updated 27 Oct 2008 version 3.1.5d2
	Added regex-based user defined prompt (udp) */my_prompt $/
		Clear udp by *//
		Scope is global, including include files

New Branch 27 Nov 2008 version 3.1.6d1
	Added support for more expect-lite directives
	*FAIL, *TERM (stops without fail)
	**SHELL=<shell>
	
Released 1 Dec 2008 version 3.1.5
o	Self executing (masquerade) expect-lite scripts
o	User Defined Prompt
	

Released 19 Jan 2009 version 3.5.0
o	User Defined Prompt & Dynamic Variables - May need to fix
	Fixed - but UDF's are harder to define than thought
o	cli -v -vv overide of script logging directives 
o	Added directives: *FAIL, *TERM (no fail) 
	*INTERACT		a shell which provides interaction - done
	add directives *NOWARN *WARN *NODEBUG *DEBUG - Done
o	add *SHOW VARS (what else can be "shown") - done d14
		*SHOW LAST - shows current line in script
o	*FORK <name>
	Permits access to multiple spawn_ids (spawn to a shell)
		Includes additional debugging info with --v - done
o	Add better prompt initialization (for other shells, like tcsh with bold in prompt)
		Set $prompt or $PS1 to sane values - done
		**SHELL=<shell> directive - sets shell	
			Allow to blank			
		Should this be a configure vs runtime directive? configure only
		Not supported in include scripts
o	Differenciate between WARN and INFO
		If, Dyn-Var should be INFOs 
		Test FAIL/PASS should be INFO


Updated 27 Jan 2009 v3.5.1.d1
	Fixed bug in labels, trailing spaces would not be trimmed
	Worded IF INFO statement, now is eval:TRUE|FALSE
	
Released 21 May 2009 version 3.5.1
	No changes, just published 3.5.1.d1
	

Updated 29 Sept 2009 version 3.5.2b1
	Made sending Control Charactors more consistant
		Now use >>^<char> or  >^<char>

Updated 28 December 2009 version 3.5.2b2 (3.6.0.RC)
	Added '<<' for expect with NO regex
		Still allows wildcarding, e.g. <<this*that
	Added self_test_basics.txt for regression of feature
	Added DEBUG statement inside Embedded Expect to make it more visable
	
Released 18 January 2010 version 3.6.0
	No changes, just published 3.5.2b2
	expect-lite turns 4!

Released 14 June 2010 version 3.6.1
	Document release only - New Website
	Released setup_ssh_keys.sh

Updated 18 June 2010 v3.6.2.d2
	Fixed bug in closing bash sessions when using r=none
		problem: cygwin bash would not close at end of script	
		
		
Updated 23 June 2010 v3.6.2.d3
	Added Debug print out for NOT expect feature

Updated 02 July 2010 v3.6.2.d4
	Fixed bug in closing cygwin bash session when using r=ssh_host
		Problem only showed in iTest

Updated 12 July 2010 v3.6.2d7 becomes release 3.6.2
	Added support for ENV Vars to automatically become constants
	
Released 13 July 2010 v3.6.2
	Includes example script for 2010 OLS
	
Released 19 July 2010 v3.6.3
	Added support for -r <host> -c <script> -d <dir> to be more linux like
	Updated help to reflect new parameters
	Added default connect mode "none"
	Changed default timeout to 10 seconds
	Added man page
	
Updated 28 July 2010 v3.6.4d2
	Added path for telnet - fixes cygwin/windows wrong telnet issue
	Added ANSI color to INFO,WARN,ERR
		Can assign color=none to all
		Added TERM detection for xterm, ansi, vt100, vt220
	

Updated 30 July 2010 v3.7.0d5
	Added *NOCOLOR directive
	Added *EOLS LF|CRLF directive
		Sends \n or \r\n
		Made fork context to hold eols per session
	Cleaned up *INTERACT - passes *FORK down with other commands
	
Released 2 August 2010 v3.7.0
	Release of 3.7.0d5 as 3.7.0


Updated 26 August 2010 v3.7.1d4
	Fixed errant color issues (when TERM=tty)
	Added *EXP_INFO, *NOEXP_INFO - shows expected lines in stdout
		Added CLI argument -w to turn on *EXP_INFO
	Added custom color to comment lines, if first word is recognized color
		e.g. ;red This comment is red
	Added *PASS - synonym for *TERM
	

Updated 10 Sept 2010 v3.7.1d7
	Fixed ^\ during a pipe to 'tee' - would give call trace
		Now expect-lite just exits with error
	Changed -w to -V to show *EXP_INFO
	
22 Aug 2010 - Created 2expect-lite as 4.0.0d1 
	Reworked buffers completely (now global array)
	Updated buffer read to only read in script lines
	Added *STEP, *SHOW N (lines) functionality
	
10 Sept 2010 - Added ALT commands to IDE
	ALT-s	step
	ALT-w	show vars
	ALT-c	continue (aka +++)
	ALT-1-9	show next N lines (1 to 9)

16 Sept 2010 - changed IDE command to 'dot' commands, help is .h
	IDE: Help
	  Key     Action
	  ----    ------
	  .s      Step
	  +++     Continue
	  .v      Show Vars
	  .1to9   Show N next lines of script
	  .-1to9  Show N lines of script
	  ctrl+D  Quit & Exit expect-lite
	  .h      this help
	Added SIGPIPE handler
		SIGPIPE - raised when pipe child is killed
		
17 Sept 2010 - 4.0.10 - Fixed *FORK problem
	Problem resulted from putting directives into own function

18 Sept 2010 - 4.0.11 - Fixed IDE .1 problem (showed current line, rather than next line)
	Added directive *INFINITE_LOOP N
		What happens when number is already exceeded? It is always decremented, you get N left

20 Sept 2010 - 4.0.12 - changed IDE char to <tab>
	The '.' interferred with IP addresses!
	<tab> interferred with tab completion
	Changed to <esc>

23 Sept 2010 - 4.0.14 - Added *NOFAIL
	Also added any *DIRECTIVE on the CLI (not **SHELL)
	Added 'clumping' to step function so expect & capture work
	
26 Sept 2010 - 40.15 - added NOFAIL to IDE
	Added warning

27 Sept 2010 - 4.0.17 
	Added "kick the prompt" on expect-lite failed lines inside IDE
	Added back quote (for cygwin) as IDE char in additon to <esc>	
	Updated help screen to 80 chars wide

28 Sept 2010 - 4.0.18
	Added skip function <esc>k
	Fixed jump to label ?if 1==1?%LABEL

29 Sept 2010 - 4.0.19
	Fixed ragged columns on show_vars


1 Oct 2010 - 4.0.20
	Fixed Cygwin/Win Paste in IDE
	
2 Oct 2010 - 4.0.21
	Added OS detection to avoid 1 sec delay in Linux (cygwin paste)
	Fixed '<<' and square brackets
	Added RED old expect-lite version warning
	Added more protection for IDE paste, fixed blank line paste (cygwin)
	v 4.0.22	
	Added Env Var support: EL_CONNECT_METHOD, EL_USER, EL_PASS, EL_DELAY_WAIT_FOR_HOST
	
12 Oct 2010 - 4.0.1 beta
	Was v 4.0.25 alpha
	Update expect-lite help screen with additional ENV VARs (the common ones)
	
15 Oct 2010 - 4.0.2 beta
	Cleaned up Pasted lines overwriting eachother
                fixed by overwriting line with 70 spaces (to "clear" line)
       Add $arg0 to <esc>v *SHOW VARs command

17 Oct 2010 - still 4.0.2 beta
	Added self test scripts for IDE
	
17 Oct 2010 - still 4.0.3 beta
	Added not-expect '-<' to step/skip clumping
	
18 Oct 2010 - 4.04 beta
	Native method to make scripts executable 
		Only works for ubuntu 9.04 and newer (bash 4.x and newer)
	Masquerade still required for older OSs

19 Oct 2010 - 4.05 Beta
	Fixed but in native executable method - script_name const=val

20 Oct 2010 - 4.0.6 beta
	Fixed IDE Step/Skip with embedded expect - added global clump 
	
23 Oct 2010 - 4.0.7 beta
	Fixed problem of Labels are not trimmed of trailing space/tabs, updated self test
	Created bashrc as example for setting env vars to customize expect-lite
		Hardended code that reads env vars	

26 Oct 2010 - 4.0.1
	was v4.0.7 beta
	
Released 26 October 2010 v4.0.1

15 Nov 2010 - 4.0.1 merged 4.0.x branch into git master, it was easy

5 Dec 2010 - 4.0.2a
	Added chars >./$ to copy/paste in IDE
	Created installer from the tar ball
		Auto configures to use ssh_keys (if unix)
		Auto calls setup_local_ssh_keys script (if unix)
		Remove file with -R option


6 Dec 2010 - 4.0.2a 
	Installer 0.92 - tested on cygwin & mac
	Remove: Restores old .bashrc, and old expect-lite (if present)

14 Dec 2010 - install.sh 0.97
	Tested in Cygwin, fixed double // problem
	Installer ready to ship in next version 4.0.2

Released 21 Dec 2010 - 4.0.2
	Minor change to debugger copy/paste to permit absolute paths
	First release of tarball installer		

22 Dec 2010 - 4.0.3.a
	Fixed *NOFAIL inside IDE, command didn't persist after continuing script


7 Jan 2011 - 4.0.3.d2
	Fixed *FORK inside IDE, was not returning to correct session upon Continuing script (+++)
	
	
13 Jan 2011 - 4.0.3.d3-lib
	Fixed terminal-type to include xterm-color
	Librarized expect-lite
		Set EL_LIBRARY to run as library, rather than stand-alone

22 Jan 2011 - 4.0.3.d5-lib
	added _el_init_lib to initialize the library function
	added _el_init_globals to initialize globals
		This is required because the library must be sourced in native TCL before loading libexpect
		
31 Jan 2011 - 4.0.3.d6-lib
	Fixed bug in Bad Time Out Value (found by Tajas Petal pateltejas.1987@gmail.com)
	Cleaned up _el_color variable names
	
6 Feb 2011 - 4.0.3.d8-lib
	Added lib proc _el_import_session_ids to import existing sessions
	Created pkgIndex.tcl to load library as a package
	Summary of EL Lib API
		package require expect-lite
		# initialize the library with CLI args
		_el_init_library "*EXP_INFO IP=10.5.5.5 *NODEBUG"
		# read this file as el script, reference by buf_stack pointer
		set cmd_file $argv0
		set cmd_list_ptr [_el_buffer $cmd_file]
		# call el script exec
		set RESULT [ _el_script_exec "" $cmd_list_ptr ]

9 Feb 2011 - 4.0.3.d9-lib
	Added _el_import_const to import constants in lib mode
		Can be repeatedly called
	Fixed *SHOW VARS in lib mode - arg0 was not defined
	Added *TIMESTAMP US|EU|ISO & *NOTIMESTAMP (idea from Kevin Broch kevbroch@gmail.com)
		ISO is default timestamp format


10 Feb 2011 - 4.0.3.d10-lib
	Library changes
		_el_import_const Warning: remote host - should be supressed
		Remove proc parray	- conflicts with other calls to parray
		*TCL suppress timeouts. reset upon return
	Cleaned up FORK code, nicer internal management of sessions
	Changed *TIMESTAMP params to ISO|YMD|DMY|MDY, default is ISO
	
20 Feb 2011 - 4.0.3.d12-lib
	Library changes
		Include files are not included, warning is printed

22 Feb 2011 - 4.0.3 released

24 Feb 2011 - 4.0.4.d1-lib
	Fixed *FORK default bug (wasn't switching back to default)
		Occurs after using include file in second session
		Added self_test_fork, test case.
	Fixed multiple failure report, when inside an include file
	
1 March 2011 - 4.0.4.d2-lib
	Fixed multiple failure report fix in library mode


22 March 2011 - 4.0.4.d4-lib-ns
	Added 'expectlite' name space to protect against name conflicts
		Only expect vars (timeout expect_out spawn_id) remain global
		Passes regression		

25 March 2011 - 4.0.4.d5-lib-ns
	Fixed IDE Step, when *FORK command is step, session didn't change
		expect interact must be restarted when changing sessions
		
27 March 2011 - 4.0.4.d6-lib-ns
	Fixed bug in fail script handling, script would not fail
		Use *NOFAIL to have fail script execute and continue
	Cleaned up name space, replace 'sets' with 'variable' where appropriate
	Added self test for fail script 

30 March 2011 - 4.0.4d8-lib-ns
	Fixed bug in _el_session_import, where EOLS was not being set

7 April 2011 - 4.0.4.d9-lib-ns
	Fixed bug in parse_var, added pipe (|) to "end of var" list
		This was a problem with regex OR, e.g. <$this|$that

10 April - 4.1.0 released

2 May 2011 - 4.1.1.d1
	Implemented reverse search of labels, allowing non-unique labels for looping
	Fixed *FAIL to work with *NOFAIL, rather than terminating immediately
	
17 May 2011 - 4.1.1d3
	Fixed *FAIL now prints in RED (was green)
	Fixed ; comments printing just before include files and directives
	
31 May 2011 - 4.1.1.d5
	Fixed fail inside include file (was continuing main script)
		*FAIL inside include file works correctly as well
	Note: fail script is not global, but local to file
	Added @n (n=number) to set timeout value from IDE (needs testing)
	
23 June 2011 - 4.1.1d6
	Fixed if statement to evaluate strictly numbers and use &&
		e.g. ?if 4 < 5 && 5 < 6? <then>	
		Removed change. Need more general solution.
		Reverted back to d5
		
26 June 2011 - 4.1.1d7
	Tested @n in IDE, fixed info statement


28 June 2011 - 4.1.1 released


29 June 2011 - 4.1.2d1
	Added if variable defined conditional
		e.g. ?if $var undef?


14 July 2011 - 4.1.2d2
	Reverted variable undef - use a different tact
	Fixed @n which caught user scp <file> user@10.1.1.1 as bad timeout


23 July 2011 - 4.1.2d3
	Added if undef var, treat var as ""
		e.g. ?if $undef_var == $blank ? or ?if $undef_var == ?

27 July 2011 - 4.1.2d4
	Fixed undef var. Var must be in set [a-zA-Z0-9_]

29 July 2011 - 4.1.2d5
	Fixed *FORK display, when "session" is part of the session name

21 August 2011 - 4.1.2
	Released. same as d5.
	Updated installer with "configure only" option, just configures user

5 September 2011 - 4.2.0d1
	Added meta-data field to buffer (for each line)
		Added push and pop of meta-data stack which allows nested while loops
	Added while loops based on "blocks of lines"
		e.g. [ this < that
				do something...
			]

6 September 2011 - 4.2.0d2
	Fixed incorrect while loop test e.g. [ 3 >
		Now warning will be printed, and block of lines will be skipped
		
8 September 2011 - 4.2.0d3
	Added IDE stepping through while loop
	Added handling unbalanced square brackets [ ]
	

11 Sept 2011 - 4.2.0.d4
	Added IDE Paste of while loop
		Need to fix: infinite loop protection does not stop loop

18 Sept 2011 - 4.2.0d5
	Fixed IDE Paste while loop infinite loop
	Allow spaces on constants e.g. my="this or that" from Michel Desjardins	madesjardins@rogers.com
		el_lib e.g. expectlite::_el_import_const " {my=this or that}"
	Added support for while loop test of blank e.g. [ 3 == $blank
	Added support for if then else code blocks e.g. ?if 1==1?[	
	Need to optimize while and if then code block code


------------ Future Versions --------------------------
		
Future

o	Add code-line-blocks with [ ] (4.2.0 candidate)
	[ <test>
	]
	Check IDE interaction - need to make special case for [ ] blocks
		x Use return codes from [ ] processing to signal IDE of [ <test> resultflag success/fail
		x Paste - create small pasted buffer of lines with meta data & process meta data with jumps
		x Handle unbalanced [ ]
		o Handle if then [ else [  (not supported)
		o while loop break? how?
	Optimizations
		o Paste use public buffer, and transfer entire buffer to _exec_script, rather than 1 line
		o Pull out List manipulation code out of _el_buffer
			Call from Paste code
		o Change _exec_script to run range of lines rather than one-line, this will allow step to run in same buffer space as script
		o Create proc _el_buffer_goto, rather than setting buf pointer directly
		
o	fix cygwin and old expect version with paste - test for expect version

x	allow spaces for constants e.g. var="this or that" from Michel Desjardins	madesjardins@rogers.com

o	list processing - foreach loop [[ $x=item1 item2 item3		 ]]

o	Add && and || to if statements

x	if undef var - treat undefined vars as ""
		an test against $blank

x	Test installer as non-privilaged user ## Fix in 4.1.11! ##
	
o	instant_interact_sig proc, needs to check el_exec return code

o	Add variables to Labels, e.g. %$LOOP

x	Update installer for install user mode (do not install expect-lite, just config user) v4.1.1

x	add change timeout in IDE @n

o	Check 4.1.0 on cygwin

x	_el_global_directive should use el(fork_current) rather than _el_current_session
	Not required

o	Look at SIGPIPE and handle broken pipe better

x	Place ::TCL and ::EL_LIBRARY in namespace 'expect-lite'
		x Clean up name space, replace 'sets' with 'variable' where appropriate

x	Clean up fork _el_fork($fork_id) to _el_fork($fork_id,session)

x	Fix IDE '>' paste (added chars ./$)

x	Fix MAN and man directory in tarball - MacOS X sees them as the same name

o	User script help - next release
	Lines which beging with """ can be integrated help

o	cygwin issues:
		Unable to detect shell start - add longer timeout for that expect line only
			Perhaps do a OS detect and lengthen the timeout for that function - remote host init

x	Add deb and rpm to download files

o	Add Conditional if, used right after > command. Eliminates need to capture var, and use the var in if statement
	If [text] then - possible format ?if [text]? or ?if text?
	
x	Add $var exist to if statement processing (added in 4.1.2)
	Look for unresolved variable $VAR ($ still in conditional)
	Need to add var exist, and var not exist
	Syntax of if statement
		?if $var exist?
		?if $var =% ?
		?if $var ?		treat existance like a boolean
		?if ==$var ?
	Defer for now


x	Creating el-lib: 
		in EL add line: package provide expect-lite 4.0 
		from tclsh: pkg_mkIndex <dir> expect-lite 
			Creates pkgIndex.tcl in <dir>


------------ Future Version 4.0 --------------------------

x	Add *STEP - advances and executes interact 1 line in the script
		Also add *NEXT and ^N
		Implemented at ALT-n

x	Add *LAST - prints out last 5 lines of expect-lite script - shows where user is
		implemented as *SHOW N, where N can be + or -
		Implemented as ALT-1-9 (shows next 1-9 lines)
			*LAST shows most recent 5 lines executed

x	Add IDE help - ALT-h

x	Add IDE paste '>' to avoid wait_for_prompt, on first line

x	Get Dyn Var working in IDE mode
		Works via paste only! 

x	Write SIGPIPE handler to exit el gracefully
		SIGPIPE - raised when pipe child is killed

x	Fix IDE '?' issue
		Require '?if'

x	Update for more config directives (x put in own proc)
		Added *INFINITE_LOOP N

x	Add directive *NOFAIL

x	Update help to 80 columns wide

x	Add Constants to *SHOW VARS view

x	Fix '<<' and square brackets (requires escaping)

x	Step function - 
		Create 'clumping' where a > will also invoke following lines with <,<<, +$
		x set *NOFAIL during IDE
		Step back? Repeat? NO
		x Add Skip function
	x Added "kick the prompt" on expect-lite failed lines

x	Add directive **CONNECT_METHOD
	Implemented as Env Var EL_CONNECT_METHOD, instead.

x	Update Docs with new IDE info
	x Add *DIRECTIVES on CLI secion
	x Add Clumping, or Island shores description

x	Update docs with IDE
		Create an Env Vars section 
			EL_CONNECT_METHOD, EL_USER, EL_PASS, EL_DELAY_WAIT_FOR_HOST

x	Update README file - delete '-r none'

x	Explore alternative to rhost=none
		Can expect run without spawn? No, Interact will not work. 

x 	Fix paste '<' line, why is expect_out buffer empty? Where is the expect_out buffer cleared?
	Fixed: Used expect to capture rest of paste from Cygwin
		# OS identification - .dll or "" = Cygwin, .so=Linux, .dylib=MacOS X
			Removes 1 second delay on Linux
			set os_id [info sharedlibextension]

x	Dyn Var - triggers new prompt, interferes with sudo. Why new prompt? regression doesn't require it
		Removed new prompt

x	Update script to state oldest expect version supported (still 5.31?, or 5.43?)
		Minimum tested is 5.42.1 (Ubuntu 6.06)
	
x	Check expect version - Protect against cygwin version
	# check version
	if { [exp_version] < "5.42.0" } {
		puts "older version of expect\n"
	}
		
x	Update expect-lite help screen with additional ENV VARs (the common ones)

x	Fix Paste overwrite (add newlines?) - not going to fix
		Try overwriting line with 80 spaces (to "clear" line)

x	Add $arg0 to <esc>v *SHOW VARs command

x	Write self test scripts for IDE

x	Native method to make scripts executable - instead of masquerade
	Only works for ubuntu 9.04 and newer (bash 4.x and newer)

x	IDE Step/Skip does not work with embedded expect - one_line problem
		Need to put clumped lines into a global

x	Labels are not trimmed of trailing space/tabs
	

x	Update Pkg (debian) and build package

x	Update Tar ball

x	Update changelog

z	Pasting in failed command does not show command (this is a one_line issue) - may not fix

z	IDE Cooked mode '-reset' to help with backspace problem
		Probably won't be fixed in 4.0.x
	
x	Compile cygwin version of expect - v5.45 works!
		x	Pack up expect.exe, libtcl8.5.dll, expect5.45.dll put in /usr/bin

x	Add New directives to regression scripts *EOLS, *NOFAIL
		
x	Update Man Page
		x Add *NOFAIL
		o export to text
			nroff -man expect-lite.1 | col -b > MAN

x	Update docs with final version and number - 4.0.1

x	Put *NOFAIL in tips doc

z	^D in IDE does not close session cleanly, this will be a problem with iTest (on cygwin)

x	Add Link to IDE section in expect-lite_docs 

x	Add Env Var customization in Install Docv
		
z	User script help - next release
	-h or --help jumps to %HELP section in script?

x	Add current help method to documentation
$sw_build=0000
; === Check passed parameters
>
*NOINFO
?if $sw_build != 0000 ? %CONTINUE
	;; ##############################
	;;	$arg0 Requires parameters: sw_build, IP
	;;	e.g. $arg0 sw_build=0015 IP=10.3.5.4
	;; ##############################
	# quit the script without continuing
	*FAIL
%CONTINUE
*INFO

x	change env vars to something like EL_SYS_PASS

o	cygwin issues:
		Unable to detect shell start - add longer timeout for that expect line only
			Perhaps do a OS detect and lengthen the timeout for that function - remote host init

x	update man page with new env Var names EL_CONNECT_USER/PASS


------------ Windows Cygwin Expect --------------------------
Known Issues
	No ssh loopback mode
	No Instant-Interactive, tclx not available on cygwin
	el_shell (IDE) does not work in *INTERACTIVE
	
	
ActiveTCL Expect problems - unusable
	No support for Interact
	No support of SIGQUIT (used by instant-interact)
	




